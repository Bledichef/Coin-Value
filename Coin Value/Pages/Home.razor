@page "/"
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using Blazorise.Charts
@inject HttpClient Http

<h1>Bienvenue sur Coin Value</h1>

<div class="crypto-dashboard">
    @if (IsLoading)
    {
        <p>Chargement des données...</p>
    }
    else if (ErrorMessage != null)
    {
        <p class="error">@ErrorMessage</p>
    }
    else
    {
        <div class="crypto-list">
            @foreach (var crypto in TopCryptos)
            {
                <div class="crypto-item">
                    <h3>@crypto.Name (@crypto.Symbol.ToUpper())</h3>
                    <p>
                        Prix :
                        @(crypto.CurrentPrice > 0
                            ? crypto.CurrentPrice.ToString("C", new System.Globalization.CultureInfo("fr-FR"))
                            : "Données indisponibles")
                    </p>
                    <p>
                        Changement 24h :
                        @(crypto.PriceChange24h.HasValue
                            ? (crypto.PriceChange24h.Value >= 0 ? "+" : "") + crypto.PriceChange24h.Value.ToString("F2") + "%"
                            : "Données indisponibles")
                    </p>
                </div>
            }
        </div>
    }
</div>

<div class="crypto-graph">
    <BarChart TItem="decimal" Data="@chartData" />
</div>

@code {
    private bool IsLoading = true;
    private string? ErrorMessage = null;
    private List<Crypto> TopCryptos = new();
    private ChartData<decimal> chartData = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTopCryptos();
        PrepareChartData();
    }

    private async Task LoadTopCryptos()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            var response = await Http.GetFromJsonAsync<List<CryptoApiResponse>>(
                "https://api.coingecko.com/api/v3/coins/markets?vs_currency=eur&order=market_cap_desc&per_page=5&page=1&sparkline=false");

            if (response != null)
            {
                TopCryptos = response.Select(c => new Crypto
                    {
                        Name = c.Name,
                        Symbol = c.Symbol,
                        CurrentPrice = c.CurrentPrice,
                        PriceChange24h = c.PriceChangePercentage24h
                    }).ToList();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Erreur lors du chargement : {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void PrepareChartData()
    {
        chartData = new ChartData<decimal>
            {
                Labels = TopCryptos.Select(c => (object)c.Name).ToList(), // Convertir les labels en object
                Datasets = new List<ChartDataset<decimal>> // Utiliser ChartDataset au lieu de BarChartDataset
        {
            new ChartDataset<decimal>
            {
                Label = "Prix actuel (€)",
                Data = TopCryptos.Select(c => c.CurrentPrice).ToList(),
                BackgroundColor = new List<string>
                {
                    "#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF"
                },
            }
        }
            };
    }


    private class CryptoApiResponse
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("symbol")]
        public string Symbol { get; set; }

        [JsonPropertyName("current_price")]
        public decimal CurrentPrice { get; set; }

        [JsonPropertyName("price_change_percentage_24h")]
        public decimal? PriceChangePercentage24h { get; set; }
    }

    private class Crypto
    {
        public string Name { get; set; }
        public string Symbol { get; set; }
        public decimal CurrentPrice { get; set; }
        public decimal? PriceChange24h { get; set; }
    }
}
